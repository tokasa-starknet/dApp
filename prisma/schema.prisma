// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PROPERTY_STATUS {
  Pending
  Verified
  Rejected
}

model Owner {
  id                   String    @id @default(uuid()) @db.Uuid
  wallet_address       String    @unique
  full_name            String
  email                String    @unique
  phone_number         String
  nationality          String
  date_of_birth        DateTime?
  kyc_doc_hash         String
  registration_tx_hash String
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  // Relations
  properties Property[]
}

model Investor {
  id             String   @id @default(uuid()) @db.Uuid
  wallet_address String   @unique
  full_name      String?
  email          String?  @unique
  kyc_status     String? // "NotVerified", "Pending", "Verified", "Rejected"
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Property {
  id                      String          @id @default(uuid()) @db.Uuid
  title                   String
  description             String
  address                 String
  latitude                Decimal?
  longitude               Decimal?
  area_sqm                Decimal?
  amenities               String[]
  estimated_value         Decimal
  tokenization_percentage Decimal
  total_tokens            Int
  price_per_token         Decimal
  verification_status     PROPERTY_STATUS @default(Pending)
  legal_docs_hash         String
  metadata_ipfs_hash      String
  registration_tx_hash    String          @db.VarChar(200)
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt

  // Relations
  owner_id String @db.Uuid
  owner    Owner  @relation(fields: [owner_id], references: [id])

  property_tokens PropertyToken[]
  soulbound_nfts  SoulboundNft[]
}

model PropertyToken {
  id                      String   @id @default(uuid()) @db.Uuid
  property_id             String   @db.Uuid
  property                Property @relation(fields: [property_id], references: [id])
  token_contract_address  String
  owner_wallet_address    String
  property_value          Decimal  @db.Decimal(20, 2)
  tokenization_percentage Int
  total_token_supply      BigInt
  token_price             Decimal  @db.Decimal(20, 6)
  distribution_model      String
  legal_document_hash     String
  metadata_uri            String
  royalty_percentage      Int?
  minimum_lock_period     Int?
  expected_annual_yield   Int?
  images                  Json?
  amenities               Json?
  terms_accepted          Boolean
  creation_tx_hash        String
  creation_timestamp      DateTime
  is_active               Boolean
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
}

model SoulboundNft {
  id                     String   @id @default(uuid()) @db.Uuid
  nft_id_onchain         BigInt   @unique
  property_id            String   @db.Uuid
  property               Property @relation(fields: [property_id], references: [id])
  owner_wallet_address   String
  owner_profile_id       String?  @db.Uuid
  token_contract_address String
  metadata_uri           String
  metadata_hash          String
  issue_tx_hash          String
  issued_at_onchain      DateTime
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

model Catalog {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  description   String   @db.Text
  active        Boolean  @default(true)
  creation_date DateTime @default(now()) @db.Timestamp(6)
  updated_date  DateTime @updatedAt @db.Timestamp(6)
  
  parameters GeneralParameters[]

  @@map("catalogs")
}

model GeneralParameters {
  id Int @id @default(autoincrement())
  catalog_id Int
  code String @db.VarChar(50)
  value String @db.VarChar(200)
  description String? @db.Text
  order Int @default(0)
  active Boolean @default(true)
  creation_date DateTime @default(now()) @db.Timestamp(6)
  updated_date DateTime @updatedAt @db.Timestamp(6)

  catalog Catalog @relation(fields: [catalog_id], references: [id], onDelete: Cascade)
  
  @@unique([catalog_id, code], name:"unique_catalog_code")
  @@map("general_parameters")
}
